; Rather than having two separate stanzas like this, should probably refactor into a /lib and /bin directory
(library
 (name conceptual)
 (libraries printbox printbox-text menhirCST zarith)
)

; ----------------- parser ----------------------------
; See https://gitlab.inria.fr/fpottier/menhir/-/blob/master/demos/calc-syntax-errors/dune
; which is a very similar example from how menhir implements their own exmample. 
; Below is for building lexer with -ml flag. 
(rule
 (target lexer.ml)
 (deps   lexer.mll)
 (action (chdir %{workspace_root}
          (run %{bin:ocamllex} -q -ml -o %{target} %{deps}))))
          ; add the desired flags here

; Or simply use if the bytecode compiler is used. This uses the automata-intepreter.
; (ocamllex lexer)

(menhir
 (flags --dump )
 (infer true) ; this flag and explain are enabled by default (in this version of dune/menhir) but explicitly included for clarity
 (explain true)
 (modules parser)
)

;
; The following deals with the .messages file.
; This rule generates "parserMessages.ml" based on the source file
; "parserMessages.messages". It requires the completeness check to have been
; performed first. 
; (rule
;   (deps parserMessages.check)
;   (action (with-stdout-to parserMessages.ml
;     (run menhir
;       %{dep:parser.mly}
;       --compile-errors %{dep:parserMessages.messages}
;     )
;   ))
; )


; This rule generates a file "parserMessages.auto.messages" that contains a
; list of all error states. It is used by the completeness check.
; (rule
;   (with-stdout-to parserMessages.auto.messages
;     (run menhir
;        %{dep:parser.mly}
;        --list-errors
;     )
;   )
; )


;; This rule implements the completeness check. It checks that every error
;; state listed in the auto-generated file "parserMessages.auto.messages"
;; is also listed in the file "parserMessages.messages" that is maintained
;; by the programmer.
; (rule
;   (with-stdout-to parserMessages.check
;   (run menhir
;     %{dep:parser.mly}
;     --compare-errors %{dep:parserMessages.auto.messages}
;     --compare-errors %{dep:parserMessages.messages}
;   ))
; )

; ----------------------------------------------

(env
 (dev
  (flags
   (:standard -warn-error -A))))

State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On CONCEPT shift to state 1
-- On program shift to state 11
-- On list(concept) shift to state 12
-- On concept shift to state 14
-- On c_sig shift to state 16
## Reductions:
-- On EOF
--   reduce production list(concept) ->

State 1:
## Known stack suffix:
## CONCEPT
## LR(1) items:
c_sig -> CONCEPT . IDENT LBRACKET loption(separated_nonempty_list(COMMA,parameter)) RBRACKET [ PURPOSE ]
## Transitions:
-- On IDENT shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## CONCEPT IDENT
## LR(1) items:
c_sig -> CONCEPT IDENT . LBRACKET loption(separated_nonempty_list(COMMA,parameter)) RBRACKET [ PURPOSE ]
## Transitions:
-- On LBRACKET shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## CONCEPT IDENT LBRACKET
## LR(1) items:
c_sig -> CONCEPT IDENT LBRACKET . loption(separated_nonempty_list(COMMA,parameter)) RBRACKET [ PURPOSE ]
## Transitions:
-- On IDENT shift to state 4
-- On separated_nonempty_list(COMMA,parameter) shift to state 5
-- On parameter shift to state 6
-- On loption(separated_nonempty_list(COMMA,parameter)) shift to state 9
## Reductions:
-- On RBRACKET
--   reduce production loption(separated_nonempty_list(COMMA,parameter)) ->

State 4:
## Known stack suffix:
## IDENT
## LR(1) items:
parameter -> IDENT . [ RBRACKET COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET COMMA
--   reduce production parameter -> IDENT

State 5:
## Known stack suffix:
## separated_nonempty_list(COMMA,parameter)
## LR(1) items:
loption(separated_nonempty_list(COMMA,parameter)) -> separated_nonempty_list(COMMA,parameter) . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production loption(separated_nonempty_list(COMMA,parameter)) -> separated_nonempty_list(COMMA,parameter)

State 6:
## Known stack suffix:
## parameter
## LR(1) items:
separated_nonempty_list(COMMA,parameter) -> parameter . [ RBRACKET ]
separated_nonempty_list(COMMA,parameter) -> parameter . COMMA separated_nonempty_list(COMMA,parameter) [ RBRACKET ]
## Transitions:
-- On COMMA shift to state 7
## Reductions:
-- On RBRACKET
--   reduce production separated_nonempty_list(COMMA,parameter) -> parameter

State 7:
## Known stack suffix:
## parameter COMMA
## LR(1) items:
separated_nonempty_list(COMMA,parameter) -> parameter COMMA . separated_nonempty_list(COMMA,parameter) [ RBRACKET ]
## Transitions:
-- On IDENT shift to state 4
-- On separated_nonempty_list(COMMA,parameter) shift to state 8
-- On parameter shift to state 6
## Reductions:

State 8:
## Known stack suffix:
## parameter COMMA separated_nonempty_list(COMMA,parameter)
## LR(1) items:
separated_nonempty_list(COMMA,parameter) -> parameter COMMA separated_nonempty_list(COMMA,parameter) . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production separated_nonempty_list(COMMA,parameter) -> parameter COMMA separated_nonempty_list(COMMA,parameter)

State 9:
## Known stack suffix:
## CONCEPT IDENT LBRACKET loption(separated_nonempty_list(COMMA,parameter))
## LR(1) items:
c_sig -> CONCEPT IDENT LBRACKET loption(separated_nonempty_list(COMMA,parameter)) . RBRACKET [ PURPOSE ]
## Transitions:
-- On RBRACKET shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## CONCEPT IDENT LBRACKET loption(separated_nonempty_list(COMMA,parameter)) RBRACKET
## LR(1) items:
c_sig -> CONCEPT IDENT LBRACKET loption(separated_nonempty_list(COMMA,parameter)) RBRACKET . [ PURPOSE ]
## Transitions:
## Reductions:
-- On PURPOSE
--   reduce production c_sig -> CONCEPT IDENT LBRACKET loption(separated_nonempty_list(COMMA,parameter)) RBRACKET

State 11:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

State 12:
## Known stack suffix:
## list(concept)
## LR(1) items:
program -> list(concept) . EOF [ # ]
## Transitions:
-- On EOF shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## list(concept) EOF
## LR(1) items:
program -> list(concept) EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> list(concept) EOF

State 14:
## Known stack suffix:
## concept
## LR(1) items:
list(concept) -> concept . list(concept) [ EOF ]
## Transitions:
-- On CONCEPT shift to state 1
-- On list(concept) shift to state 15
-- On concept shift to state 14
-- On c_sig shift to state 16
## Reductions:
-- On EOF
--   reduce production list(concept) ->

State 15:
## Known stack suffix:
## concept list(concept)
## LR(1) items:
list(concept) -> concept list(concept) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production list(concept) -> concept list(concept)

State 16:
## Known stack suffix:
## c_sig
## LR(1) items:
concept -> c_sig . c_purpose c_state c_actions [ EOF CONCEPT ]
## Transitions:
-- On PURPOSE shift to state 17
-- On c_purpose shift to state 18
## Reductions:

State 17:
## Known stack suffix:
## PURPOSE
## LR(1) items:
c_purpose -> PURPOSE . [ STATE ]
## Transitions:
## Reductions:
-- On STATE
--   reduce production c_purpose -> PURPOSE

State 18:
## Known stack suffix:
## c_sig c_purpose
## LR(1) items:
concept -> c_sig c_purpose . c_state c_actions [ EOF CONCEPT ]
## Transitions:
-- On STATE shift to state 19
-- On c_state shift to state 82
## Reductions:

State 19:
## Known stack suffix:
## STATE
## LR(1) items:
c_state -> STATE . list(state) ACTIONS [ ACTIONS ]
## Transitions:
-- On IDENT shift to state 20
-- On state shift to state 23
-- On separated_nonempty_list(COMMA,IDENT) shift to state 24
-- On named_parameters shift to state 25
-- On loption(separated_nonempty_list(COMMA,IDENT)) shift to state 68
-- On list(state) shift to state 80
## Reductions:
-- On ACTIONS
--   reduce production list(state) ->
-- On COLON
--   reduce production loption(separated_nonempty_list(COMMA,IDENT)) ->

State 20:
## Known stack suffix:
## IDENT
## LR(1) items:
separated_nonempty_list(COMMA,IDENT) -> IDENT . [ COLON ]
separated_nonempty_list(COMMA,IDENT) -> IDENT . COMMA separated_nonempty_list(COMMA,IDENT) [ COLON ]
## Transitions:
-- On COMMA shift to state 21
## Reductions:
-- On COLON
--   reduce production separated_nonempty_list(COMMA,IDENT) -> IDENT

State 21:
## Known stack suffix:
## IDENT COMMA
## LR(1) items:
separated_nonempty_list(COMMA,IDENT) -> IDENT COMMA . separated_nonempty_list(COMMA,IDENT) [ COLON ]
## Transitions:
-- On IDENT shift to state 20
-- On separated_nonempty_list(COMMA,IDENT) shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## IDENT COMMA separated_nonempty_list(COMMA,IDENT)
## LR(1) items:
separated_nonempty_list(COMMA,IDENT) -> IDENT COMMA separated_nonempty_list(COMMA,IDENT) . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production separated_nonempty_list(COMMA,IDENT) -> IDENT COMMA separated_nonempty_list(COMMA,IDENT)

State 23:
## Known stack suffix:
## state
## LR(1) items:
list(state) -> state . list(state) [ ACTIONS ]
## Transitions:
-- On IDENT shift to state 20
-- On state shift to state 23
-- On separated_nonempty_list(COMMA,IDENT) shift to state 24
-- On named_parameters shift to state 25
-- On loption(separated_nonempty_list(COMMA,IDENT)) shift to state 68
-- On list(state) shift to state 79
## Reductions:
-- On ACTIONS
--   reduce production list(state) ->
-- On COLON
--   reduce production loption(separated_nonempty_list(COMMA,IDENT)) ->

State 24:
## Known stack suffix:
## separated_nonempty_list(COMMA,IDENT)
## LR(1) items:
loption(separated_nonempty_list(COMMA,IDENT)) -> separated_nonempty_list(COMMA,IDENT) . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production loption(separated_nonempty_list(COMMA,IDENT)) -> separated_nonempty_list(COMMA,IDENT)

State 25:
## Known stack suffix:
## named_parameters
## LR(1) items:
state -> named_parameters . [ IDENT COLON ACTIONS ]
state -> named_parameters . ASSIGN expr [ IDENT COLON ACTIONS ]
## Transitions:
-- On ASSIGN shift to state 26
## Reductions:
-- On IDENT COLON ACTIONS
--   reduce production state -> named_parameters

State 26:
## Known stack suffix:
## named_parameters ASSIGN
## LR(1) items:
state -> named_parameters ASSIGN . expr [ IDENT COLON ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 67
## Reductions:

State 27:
## Known stack suffix:
## STR_LIT
## LR(1) items:
expr -> STR_LIT . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
## Reductions:
-- On PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS
--   reduce production expr -> STR_LIT

State 28:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 66
## Reductions:

State 29:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 65
## Reductions:

State 30:
## Known stack suffix:
## INT_LIT
## LR(1) items:
expr -> INT_LIT . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
## Reductions:
-- On PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS
--   reduce production expr -> INT_LIT

State 31:
## Known stack suffix:
## IDENT
## LR(1) items:
lval -> IDENT . [ PLUS OP NOT NEQ MINUSEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON ASSIGN AMPEQ AMP ADDEQ ACTION_START ACTIONS ]
## Transitions:
## Reductions:
-- On PLUS OP NOT NEQ MINUSEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON ASSIGN AMPEQ AMP ADDEQ ACTION_START ACTIONS
--   reduce production lval -> IDENT

State 32:
## Known stack suffix:
## BOOL_LIT
## LR(1) items:
expr -> BOOL_LIT . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
## Reductions:
-- On PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS
--   reduce production expr -> BOOL_LIT

State 33:
## Known stack suffix:
## lval
## LR(1) items:
expr -> lval . ASSIGN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> lval . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
lval -> lval . DOT lval [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON ASSIGN AMP ACTION_START ACTIONS ]
## Transitions:
-- On ASSIGN shift to state 34
## Reductions:
-- On PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS
--   reduce production expr -> lval

State 34:
## Known stack suffix:
## lval ASSIGN
## LR(1) items:
expr -> lval ASSIGN . expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## lval ASSIGN expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> lval ASSIGN expr . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On PLUS shift to state 36
-- On NOT shift to state 42
-- On NEQ shift to state 47
-- On MINUS shift to state 45
-- On LTE shift to state 49
-- On LT shift to state 51
-- On LOR shift to state 53
-- On LAND shift to state 55
-- On IN shift to state 57
-- On GTE shift to state 59
-- On GT shift to state 61
-- On EQ shift to state 63
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP IDENT EOF CONCEPT COLON ACTION_START ACTIONS
--   reduce production expr -> lval ASSIGN expr

State 36:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr PLUS expr . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF CONCEPT COLON ACTION_START ACTIONS
--   reduce production expr -> expr PLUS expr

State 38:
## Known stack suffix:
## expr DOT
## LR(1) items:
expr -> expr DOT . expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## expr DOT expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr DOT expr . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
## Reductions:
-- On PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS
--   reduce production expr -> expr DOT expr

State 40:
## Known stack suffix:
## expr AMP
## LR(1) items:
expr -> expr AMP . expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## expr AMP expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr AMP expr . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On DOT shift to state 38
## Reductions:
-- On PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF CONCEPT COLON AMP ACTION_START ACTIONS
--   reduce production expr -> expr AMP expr

State 42:
## Known stack suffix:
## expr NOT
## LR(1) items:
expr -> expr NOT . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On IN shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## expr NOT IN
## LR(1) items:
expr -> expr NOT IN . expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## expr NOT IN expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr NOT IN expr . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On PLUS shift to state 36
-- On MINUS shift to state 45
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP NOT NEQ LTE LT LOR LAND IN IDENT GTE GT EQ EOF CONCEPT COLON ACTION_START ACTIONS
--   reduce production expr -> expr NOT IN expr

State 45:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr MINUS expr . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF CONCEPT COLON ACTION_START ACTIONS
--   reduce production expr -> expr MINUS expr

State 47:
## Known stack suffix:
## expr NEQ
## LR(1) items:
expr -> expr NEQ . expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## expr NEQ expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr NEQ expr . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On PLUS shift to state 36
-- On MINUS shift to state 45
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP NOT NEQ LTE LT LOR LAND IN IDENT GTE GT EQ EOF CONCEPT COLON ACTION_START ACTIONS
--   reduce production expr -> expr NEQ expr

State 49:
## Known stack suffix:
## expr LTE
## LR(1) items:
expr -> expr LTE . expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## expr LTE expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr LTE expr . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On PLUS shift to state 36
-- On MINUS shift to state 45
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP NOT NEQ LTE LT LOR LAND IN IDENT GTE GT EQ EOF CONCEPT COLON ACTION_START ACTIONS
--   reduce production expr -> expr LTE expr

State 51:
## Known stack suffix:
## expr LT
## LR(1) items:
expr -> expr LT . expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## expr LT expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr LT expr . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On PLUS shift to state 36
-- On MINUS shift to state 45
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP NOT NEQ LTE LT LOR LAND IN IDENT GTE GT EQ EOF CONCEPT COLON ACTION_START ACTIONS
--   reduce production expr -> expr LT expr

State 53:
## Known stack suffix:
## expr LOR
## LR(1) items:
expr -> expr LOR . expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## expr LOR expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr LOR expr . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On PLUS shift to state 36
-- On NOT shift to state 42
-- On NEQ shift to state 47
-- On MINUS shift to state 45
-- On LTE shift to state 49
-- On LT shift to state 51
-- On LAND shift to state 55
-- On IN shift to state 57
-- On GTE shift to state 59
-- On GT shift to state 61
-- On EQ shift to state 63
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP LOR IDENT EOF CONCEPT COLON ACTION_START ACTIONS
--   reduce production expr -> expr LOR expr

State 55:
## Known stack suffix:
## expr LAND
## LR(1) items:
expr -> expr LAND . expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## expr LAND expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr LAND expr . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On PLUS shift to state 36
-- On NOT shift to state 42
-- On NEQ shift to state 47
-- On MINUS shift to state 45
-- On LTE shift to state 49
-- On LT shift to state 51
-- On IN shift to state 57
-- On GTE shift to state 59
-- On GT shift to state 61
-- On EQ shift to state 63
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP LOR LAND IDENT EOF CONCEPT COLON ACTION_START ACTIONS
--   reduce production expr -> expr LAND expr

State 57:
## Known stack suffix:
## expr IN
## LR(1) items:
expr -> expr IN . expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## expr IN expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr IN expr . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On PLUS shift to state 36
-- On MINUS shift to state 45
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP NOT NEQ LTE LT LOR LAND IN IDENT GTE GT EQ EOF CONCEPT COLON ACTION_START ACTIONS
--   reduce production expr -> expr IN expr

State 59:
## Known stack suffix:
## expr GTE
## LR(1) items:
expr -> expr GTE . expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## expr GTE expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr GTE expr . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On PLUS shift to state 36
-- On MINUS shift to state 45
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP NOT NEQ LTE LT LOR LAND IN IDENT GTE GT EQ EOF CONCEPT COLON ACTION_START ACTIONS
--   reduce production expr -> expr GTE expr

State 61:
## Known stack suffix:
## expr GT
## LR(1) items:
expr -> expr GT . expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## expr GT expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr GT expr . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On PLUS shift to state 36
-- On MINUS shift to state 45
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP NOT NEQ LTE LT LOR LAND IN IDENT GTE GT EQ EOF CONCEPT COLON ACTION_START ACTIONS
--   reduce production expr -> expr GT expr

State 63:
## Known stack suffix:
## expr EQ
## LR(1) items:
expr -> expr EQ . expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## expr EQ expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr EQ expr . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On PLUS shift to state 36
-- On MINUS shift to state 45
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP NOT NEQ LTE LT LOR LAND IN IDENT GTE GT EQ EOF CONCEPT COLON ACTION_START ACTIONS
--   reduce production expr -> expr EQ expr

State 65:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> MINUS expr . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On PLUS shift to state 36
-- On NEQ shift to state 47
-- On MINUS shift to state 45
-- On LTE shift to state 49
-- On LT shift to state 51
-- On IN shift to state 57
-- On GTE shift to state 59
-- On GT shift to state 61
-- On EQ shift to state 63
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP NOT LOR LAND IDENT EOF CONCEPT COLON ACTION_START ACTIONS
--   reduce production expr -> MINUS expr

State 66:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
expr -> NOT expr . [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON AMP ACTION_START ACTIONS ]
## Transitions:
-- On PLUS shift to state 36
-- On NEQ shift to state 47
-- On MINUS shift to state 45
-- On LTE shift to state 49
-- On LT shift to state 51
-- On IN shift to state 57
-- On GTE shift to state 59
-- On GT shift to state 61
-- On EQ shift to state 63
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP LOR LAND IDENT EOF CONCEPT COLON ACTION_START ACTIONS
--   reduce production expr -> NOT expr

State 67:
## Known stack suffix:
## named_parameters ASSIGN expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ DOT COLON AMP ACTIONS ]
expr -> expr . MINUS expr [ PLUS NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ DOT COLON AMP ACTIONS ]
expr -> expr . AMP expr [ PLUS NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ DOT COLON AMP ACTIONS ]
expr -> expr . LAND expr [ PLUS NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ DOT COLON AMP ACTIONS ]
expr -> expr . LOR expr [ PLUS NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ DOT COLON AMP ACTIONS ]
expr -> expr . EQ expr [ PLUS NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ DOT COLON AMP ACTIONS ]
expr -> expr . NEQ expr [ PLUS NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ DOT COLON AMP ACTIONS ]
expr -> expr . LT expr [ PLUS NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ DOT COLON AMP ACTIONS ]
expr -> expr . GT expr [ PLUS NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ DOT COLON AMP ACTIONS ]
expr -> expr . LTE expr [ PLUS NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ DOT COLON AMP ACTIONS ]
expr -> expr . GTE expr [ PLUS NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ DOT COLON AMP ACTIONS ]
expr -> expr . IN expr [ PLUS NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ DOT COLON AMP ACTIONS ]
expr -> expr . NOT IN expr [ PLUS NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ DOT COLON AMP ACTIONS ]
expr -> expr . DOT expr [ PLUS NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ DOT COLON AMP ACTIONS ]
state -> named_parameters ASSIGN expr . [ IDENT COLON ACTIONS ]
## Transitions:
-- On PLUS shift to state 36
-- On NOT shift to state 42
-- On NEQ shift to state 47
-- On MINUS shift to state 45
-- On LTE shift to state 49
-- On LT shift to state 51
-- On LOR shift to state 53
-- On LAND shift to state 55
-- On IN shift to state 57
-- On GTE shift to state 59
-- On GT shift to state 61
-- On EQ shift to state 63
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On IDENT COLON ACTIONS
--   reduce production state -> named_parameters ASSIGN expr

State 68:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,IDENT))
## LR(1) items:
named_parameters -> loption(separated_nonempty_list(COMMA,IDENT)) . COLON typ [ RPAREN OUT IDENT COMMA COLON ASSIGN ACTIONS ]
## Transitions:
-- On COLON shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,IDENT)) COLON
## LR(1) items:
named_parameters -> loption(separated_nonempty_list(COMMA,IDENT)) COLON . typ [ RPAREN OUT IDENT COMMA COLON ASSIGN ACTIONS ]
## Transitions:
-- On STRING shift to state 70
-- On SET shift to state 71
-- On INT shift to state 72
-- On IDENT shift to state 73
-- On BOOL shift to state 74
-- On typ shift to state 78
## Reductions:

State 70:
## Known stack suffix:
## STRING
## LR(1) items:
typ -> STRING . [ RPAREN OUT IDENT COMMA COLON ASSIGN ARROW ACTIONS ]
## Transitions:
## Reductions:
-- On RPAREN OUT IDENT COMMA COLON ASSIGN ARROW ACTIONS
--   reduce production typ -> STRING

State 71:
## Known stack suffix:
## SET
## LR(1) items:
typ -> SET . typ [ RPAREN OUT IDENT COMMA COLON ASSIGN ARROW ACTIONS ]
## Transitions:
-- On STRING shift to state 70
-- On SET shift to state 71
-- On INT shift to state 72
-- On IDENT shift to state 73
-- On BOOL shift to state 74
-- On typ shift to state 75
## Reductions:

State 72:
## Known stack suffix:
## INT
## LR(1) items:
typ -> INT . [ RPAREN OUT IDENT COMMA COLON ASSIGN ARROW ACTIONS ]
## Transitions:
## Reductions:
-- On RPAREN OUT IDENT COMMA COLON ASSIGN ARROW ACTIONS
--   reduce production typ -> INT

State 73:
## Known stack suffix:
## IDENT
## LR(1) items:
typ -> IDENT . [ RPAREN OUT IDENT COMMA COLON ASSIGN ARROW ACTIONS ]
## Transitions:
## Reductions:
-- On RPAREN OUT IDENT COMMA COLON ASSIGN ARROW ACTIONS
--   reduce production typ -> IDENT

State 74:
## Known stack suffix:
## BOOL
## LR(1) items:
typ -> BOOL . [ RPAREN OUT IDENT COMMA COLON ASSIGN ARROW ACTIONS ]
## Transitions:
## Reductions:
-- On RPAREN OUT IDENT COMMA COLON ASSIGN ARROW ACTIONS
--   reduce production typ -> BOOL

State 75:
## Known stack suffix:
## SET typ
## LR(1) items:
typ -> SET typ . [ RPAREN OUT IDENT COMMA COLON ASSIGN ARROW ACTIONS ]
typ -> typ . ARROW typ [ RPAREN OUT IDENT COMMA COLON ASSIGN ARROW ACTIONS ]
## Transitions:
-- On ARROW shift to state 76
## Reductions:
-- On RPAREN OUT IDENT COMMA COLON ASSIGN ACTIONS
--   reduce production typ -> SET typ

State 76:
## Known stack suffix:
## typ ARROW
## LR(1) items:
typ -> typ ARROW . typ [ RPAREN OUT IDENT COMMA COLON ASSIGN ARROW ACTIONS ]
## Transitions:
-- On STRING shift to state 70
-- On SET shift to state 71
-- On INT shift to state 72
-- On IDENT shift to state 73
-- On BOOL shift to state 74
-- On typ shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## typ ARROW typ
## LR(1) items:
typ -> typ . ARROW typ [ RPAREN OUT IDENT COMMA COLON ASSIGN ARROW ACTIONS ]
typ -> typ ARROW typ . [ RPAREN OUT IDENT COMMA COLON ASSIGN ARROW ACTIONS ]
## Transitions:
-- On ARROW shift to state 76
## Reductions:
-- On RPAREN OUT IDENT COMMA COLON ASSIGN ACTIONS
--   reduce production typ -> typ ARROW typ

State 78:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,IDENT)) COLON typ
## LR(1) items:
named_parameters -> loption(separated_nonempty_list(COMMA,IDENT)) COLON typ . [ RPAREN OUT IDENT COMMA COLON ASSIGN ACTIONS ]
typ -> typ . ARROW typ [ RPAREN OUT IDENT COMMA COLON ASSIGN ARROW ACTIONS ]
## Transitions:
-- On ARROW shift to state 76
## Reductions:
-- On RPAREN OUT IDENT COMMA COLON ASSIGN ACTIONS
--   reduce production named_parameters -> loption(separated_nonempty_list(COMMA,IDENT)) COLON typ

State 79:
## Known stack suffix:
## state list(state)
## LR(1) items:
list(state) -> state list(state) . [ ACTIONS ]
## Transitions:
## Reductions:
-- On ACTIONS
--   reduce production list(state) -> state list(state)

State 80:
## Known stack suffix:
## STATE list(state)
## LR(1) items:
c_state -> STATE list(state) . ACTIONS [ ACTIONS ]
## Transitions:
-- On ACTIONS shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## STATE list(state) ACTIONS
## LR(1) items:
c_state -> STATE list(state) ACTIONS . [ ACTIONS ]
## Transitions:
## Reductions:
-- On ACTIONS
--   reduce production c_state -> STATE list(state) ACTIONS

State 82:
## Known stack suffix:
## c_sig c_purpose c_state
## LR(1) items:
concept -> c_sig c_purpose c_state . c_actions [ EOF CONCEPT ]
## Transitions:
-- On ACTIONS shift to state 83
-- On c_actions shift to state 119
## Reductions:

State 83:
## Known stack suffix:
## ACTIONS
## LR(1) items:
c_actions -> ACTIONS . nonempty_list(action) OP [ EOF CONCEPT ]
c_actions -> ACTIONS . nonempty_list(action) [ EOF CONCEPT ]
## Transitions:
-- On ACTION_START shift to state 84
-- On nonempty_list(action) shift to state 95
-- On action_sig shift to state 97
-- On action shift to state 117
## Reductions:

State 84:
## Known stack suffix:
## ACTION_START
## LR(1) items:
action_sig -> ACTION_START . LPAREN list(action_sig_param) RPAREN [ WHEN OP IDENT EOF CONCEPT ACTION_START ]
## Transitions:
-- On LPAREN shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## ACTION_START LPAREN
## LR(1) items:
action_sig -> ACTION_START LPAREN . list(action_sig_param) RPAREN [ WHEN OP IDENT EOF CONCEPT ACTION_START ]
## Transitions:
-- On IDENT shift to state 20
-- On separated_nonempty_list(COMMA,IDENT) shift to state 24
-- On named_parameters shift to state 86
-- On loption(separated_nonempty_list(COMMA,IDENT)) shift to state 68
-- On list(action_sig_param) shift to state 91
-- On action_sig_param shift to state 93
## Reductions:
-- On RPAREN
--   reduce production list(action_sig_param) ->
-- On COLON
--   reduce production loption(separated_nonempty_list(COMMA,IDENT)) ->

State 86:
## Known stack suffix:
## named_parameters
## LR(1) items:
action_sig_param -> named_parameters . option(OUT) [ RPAREN IDENT COLON ]
action_sig_param -> named_parameters . option(OUT) COMMA action_sig_param [ RPAREN IDENT COLON ]
## Transitions:
-- On OUT shift to state 87
-- On option(OUT) shift to state 88
## Reductions:
-- On RPAREN IDENT COMMA COLON
--   reduce production option(OUT) ->

State 87:
## Known stack suffix:
## OUT
## LR(1) items:
option(OUT) -> OUT . [ RPAREN IDENT COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN IDENT COMMA COLON
--   reduce production option(OUT) -> OUT

State 88:
## Known stack suffix:
## named_parameters option(OUT)
## LR(1) items:
action_sig_param -> named_parameters option(OUT) . [ RPAREN IDENT COLON ]
action_sig_param -> named_parameters option(OUT) . COMMA action_sig_param [ RPAREN IDENT COLON ]
## Transitions:
-- On COMMA shift to state 89
## Reductions:
-- On RPAREN IDENT COLON
--   reduce production action_sig_param -> named_parameters option(OUT)

State 89:
## Known stack suffix:
## named_parameters option(OUT) COMMA
## LR(1) items:
action_sig_param -> named_parameters option(OUT) COMMA . action_sig_param [ RPAREN IDENT COLON ]
## Transitions:
-- On IDENT shift to state 20
-- On separated_nonempty_list(COMMA,IDENT) shift to state 24
-- On named_parameters shift to state 86
-- On loption(separated_nonempty_list(COMMA,IDENT)) shift to state 68
-- On action_sig_param shift to state 90
## Reductions:
-- On COLON
--   reduce production loption(separated_nonempty_list(COMMA,IDENT)) ->

State 90:
## Known stack suffix:
## named_parameters option(OUT) COMMA action_sig_param
## LR(1) items:
action_sig_param -> named_parameters option(OUT) COMMA action_sig_param . [ RPAREN IDENT COLON ]
## Transitions:
## Reductions:
-- On RPAREN IDENT COLON
--   reduce production action_sig_param -> named_parameters option(OUT) COMMA action_sig_param

State 91:
## Known stack suffix:
## ACTION_START LPAREN list(action_sig_param)
## LR(1) items:
action_sig -> ACTION_START LPAREN list(action_sig_param) . RPAREN [ WHEN OP IDENT EOF CONCEPT ACTION_START ]
## Transitions:
-- On RPAREN shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## ACTION_START LPAREN list(action_sig_param) RPAREN
## LR(1) items:
action_sig -> ACTION_START LPAREN list(action_sig_param) RPAREN . [ WHEN OP IDENT EOF CONCEPT ACTION_START ]
## Transitions:
## Reductions:
-- On WHEN OP IDENT EOF CONCEPT ACTION_START
--   reduce production action_sig -> ACTION_START LPAREN list(action_sig_param) RPAREN

State 93:
## Known stack suffix:
## action_sig_param
## LR(1) items:
list(action_sig_param) -> action_sig_param . list(action_sig_param) [ RPAREN ]
## Transitions:
-- On IDENT shift to state 20
-- On separated_nonempty_list(COMMA,IDENT) shift to state 24
-- On named_parameters shift to state 86
-- On loption(separated_nonempty_list(COMMA,IDENT)) shift to state 68
-- On list(action_sig_param) shift to state 94
-- On action_sig_param shift to state 93
## Reductions:
-- On RPAREN
--   reduce production list(action_sig_param) ->
-- On COLON
--   reduce production loption(separated_nonempty_list(COMMA,IDENT)) ->

State 94:
## Known stack suffix:
## action_sig_param list(action_sig_param)
## LR(1) items:
list(action_sig_param) -> action_sig_param list(action_sig_param) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production list(action_sig_param) -> action_sig_param list(action_sig_param)

State 95:
## Known stack suffix:
## ACTIONS nonempty_list(action)
## LR(1) items:
c_actions -> ACTIONS nonempty_list(action) . OP [ EOF CONCEPT ]
c_actions -> ACTIONS nonempty_list(action) . [ EOF CONCEPT ]
## Transitions:
-- On OP shift to state 96
## Reductions:
-- On EOF CONCEPT
--   reduce production c_actions -> ACTIONS nonempty_list(action)

State 96:
## Known stack suffix:
## ACTIONS nonempty_list(action) OP
## LR(1) items:
c_actions -> ACTIONS nonempty_list(action) OP . [ EOF CONCEPT ]
## Transitions:
## Reductions:
-- On EOF CONCEPT
--   reduce production c_actions -> ACTIONS nonempty_list(action) OP

State 97:
## Known stack suffix:
## action_sig
## LR(1) items:
action -> action_sig . action_firing_cond action_body [ OP EOF CONCEPT ACTION_START ]
## Transitions:
-- On WHEN shift to state 98
-- On action_firing_cond shift to state 100
## Reductions:
-- On OP IDENT EOF CONCEPT ACTION_START
--   reduce production action_firing_cond ->

State 98:
## Known stack suffix:
## WHEN
## LR(1) items:
action_firing_cond -> WHEN . expr [ OP IDENT EOF CONCEPT ACTION_START ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## WHEN expr
## LR(1) items:
action_firing_cond -> WHEN expr . [ OP IDENT EOF CONCEPT ACTION_START ]
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
## Transitions:
-- On PLUS shift to state 36
-- On NOT shift to state 42
-- On NEQ shift to state 47
-- On MINUS shift to state 45
-- On LTE shift to state 49
-- On LT shift to state 51
-- On LOR shift to state 53
-- On LAND shift to state 55
-- On IN shift to state 57
-- On GTE shift to state 59
-- On GT shift to state 61
-- On EQ shift to state 63
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP IDENT EOF CONCEPT ACTION_START
--   reduce production action_firing_cond -> WHEN expr

State 100:
## Known stack suffix:
## action_sig action_firing_cond
## LR(1) items:
action -> action_sig action_firing_cond . action_body [ OP EOF CONCEPT ACTION_START ]
## Transitions:
-- On IDENT shift to state 31
-- On stmt shift to state 101
-- On lval shift to state 102
-- On list(stmt) shift to state 115
-- On compound_assign shift to state 114
-- On action_body shift to state 116
## Reductions:
-- On OP EOF CONCEPT ACTION_START
--   reduce production list(stmt) ->

State 101:
## Known stack suffix:
## stmt
## LR(1) items:
list(stmt) -> stmt . list(stmt) [ OP EOF CONCEPT ACTION_START ]
## Transitions:
-- On IDENT shift to state 31
-- On stmt shift to state 101
-- On lval shift to state 102
-- On list(stmt) shift to state 113
-- On compound_assign shift to state 114
## Reductions:
-- On OP EOF CONCEPT ACTION_START
--   reduce production list(stmt) ->

State 102:
## Known stack suffix:
## lval
## LR(1) items:
compound_assign -> lval . ADDEQ expr [ OP IDENT EOF CONCEPT ACTION_START ]
compound_assign -> lval . MINUSEQ expr [ OP IDENT EOF CONCEPT ACTION_START ]
compound_assign -> lval . AMPEQ expr [ OP IDENT EOF CONCEPT ACTION_START ]
lval -> lval . DOT lval [ MINUSEQ DOT ASSIGN AMPEQ ADDEQ ]
stmt -> lval . ASSIGN expr [ OP IDENT EOF CONCEPT ACTION_START ]
## Transitions:
-- On MINUSEQ shift to state 103
-- On DOT shift to state 105
-- On ASSIGN shift to state 107
-- On AMPEQ shift to state 109
-- On ADDEQ shift to state 111
## Reductions:

State 103:
## Known stack suffix:
## lval MINUSEQ
## LR(1) items:
compound_assign -> lval MINUSEQ . expr [ OP IDENT EOF CONCEPT ACTION_START ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## lval MINUSEQ expr
## LR(1) items:
compound_assign -> lval MINUSEQ expr . [ OP IDENT EOF CONCEPT ACTION_START ]
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
## Transitions:
-- On PLUS shift to state 36
-- On NOT shift to state 42
-- On NEQ shift to state 47
-- On MINUS shift to state 45
-- On LTE shift to state 49
-- On LT shift to state 51
-- On LOR shift to state 53
-- On LAND shift to state 55
-- On IN shift to state 57
-- On GTE shift to state 59
-- On GT shift to state 61
-- On EQ shift to state 63
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP IDENT EOF CONCEPT ACTION_START
--   reduce production compound_assign -> lval MINUSEQ expr

State 105:
## Known stack suffix:
## lval DOT
## LR(1) items:
lval -> lval DOT . lval [ PLUS OP NOT NEQ MINUSEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON ASSIGN AMPEQ AMP ADDEQ ACTION_START ACTIONS ]
## Transitions:
-- On IDENT shift to state 31
-- On lval shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## lval DOT lval
## LR(1) items:
lval -> lval . DOT lval [ PLUS OP NOT NEQ MINUSEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON ASSIGN AMPEQ AMP ADDEQ ACTION_START ACTIONS ]
lval -> lval DOT lval . [ PLUS OP NOT NEQ MINUSEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON ASSIGN AMPEQ AMP ADDEQ ACTION_START ACTIONS ]
## Transitions:
## Reductions:
-- On PLUS OP NOT NEQ MINUSEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT COLON ASSIGN AMPEQ AMP ADDEQ ACTION_START ACTIONS
--   reduce production lval -> lval DOT lval

State 107:
## Known stack suffix:
## lval ASSIGN
## LR(1) items:
stmt -> lval ASSIGN . expr [ OP IDENT EOF CONCEPT ACTION_START ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## lval ASSIGN expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
stmt -> lval ASSIGN expr . [ OP IDENT EOF CONCEPT ACTION_START ]
## Transitions:
-- On PLUS shift to state 36
-- On NOT shift to state 42
-- On NEQ shift to state 47
-- On MINUS shift to state 45
-- On LTE shift to state 49
-- On LT shift to state 51
-- On LOR shift to state 53
-- On LAND shift to state 55
-- On IN shift to state 57
-- On GTE shift to state 59
-- On GT shift to state 61
-- On EQ shift to state 63
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP IDENT EOF CONCEPT ACTION_START
--   reduce production stmt -> lval ASSIGN expr

State 109:
## Known stack suffix:
## lval AMPEQ
## LR(1) items:
compound_assign -> lval AMPEQ . expr [ OP IDENT EOF CONCEPT ACTION_START ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## lval AMPEQ expr
## LR(1) items:
compound_assign -> lval AMPEQ expr . [ OP IDENT EOF CONCEPT ACTION_START ]
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
## Transitions:
-- On PLUS shift to state 36
-- On NOT shift to state 42
-- On NEQ shift to state 47
-- On MINUS shift to state 45
-- On LTE shift to state 49
-- On LT shift to state 51
-- On LOR shift to state 53
-- On LAND shift to state 55
-- On IN shift to state 57
-- On GTE shift to state 59
-- On GT shift to state 61
-- On EQ shift to state 63
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP IDENT EOF CONCEPT ACTION_START
--   reduce production compound_assign -> lval AMPEQ expr

State 111:
## Known stack suffix:
## lval ADDEQ
## LR(1) items:
compound_assign -> lval ADDEQ . expr [ OP IDENT EOF CONCEPT ACTION_START ]
## Transitions:
-- On STR_LIT shift to state 27
-- On NOT shift to state 28
-- On MINUS shift to state 29
-- On INT_LIT shift to state 30
-- On IDENT shift to state 31
-- On BOOL_LIT shift to state 32
-- On lval shift to state 33
-- On expr shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## lval ADDEQ expr
## LR(1) items:
compound_assign -> lval ADDEQ expr . [ OP IDENT EOF CONCEPT ACTION_START ]
expr -> expr . PLUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . MINUS expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . AMP expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LAND expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LOR expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . EQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . NEQ expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . GT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . LTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . GTE expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . NOT IN expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
expr -> expr . DOT expr [ PLUS OP NOT NEQ MINUS LTE LT LOR LAND IN IDENT GTE GT EQ EOF DOT CONCEPT AMP ACTION_START ]
## Transitions:
-- On PLUS shift to state 36
-- On NOT shift to state 42
-- On NEQ shift to state 47
-- On MINUS shift to state 45
-- On LTE shift to state 49
-- On LT shift to state 51
-- On LOR shift to state 53
-- On LAND shift to state 55
-- On IN shift to state 57
-- On GTE shift to state 59
-- On GT shift to state 61
-- On EQ shift to state 63
-- On DOT shift to state 38
-- On AMP shift to state 40
## Reductions:
-- On OP IDENT EOF CONCEPT ACTION_START
--   reduce production compound_assign -> lval ADDEQ expr

State 113:
## Known stack suffix:
## stmt list(stmt)
## LR(1) items:
list(stmt) -> stmt list(stmt) . [ OP EOF CONCEPT ACTION_START ]
## Transitions:
## Reductions:
-- On OP EOF CONCEPT ACTION_START
--   reduce production list(stmt) -> stmt list(stmt)

State 114:
## Known stack suffix:
## compound_assign
## LR(1) items:
stmt -> compound_assign . [ OP IDENT EOF CONCEPT ACTION_START ]
## Transitions:
## Reductions:
-- On OP IDENT EOF CONCEPT ACTION_START
--   reduce production stmt -> compound_assign

State 115:
## Known stack suffix:
## list(stmt)
## LR(1) items:
action_body -> list(stmt) . [ OP EOF CONCEPT ACTION_START ]
## Transitions:
## Reductions:
-- On OP EOF CONCEPT ACTION_START
--   reduce production action_body -> list(stmt)

State 116:
## Known stack suffix:
## action_sig action_firing_cond action_body
## LR(1) items:
action -> action_sig action_firing_cond action_body . [ OP EOF CONCEPT ACTION_START ]
## Transitions:
## Reductions:
-- On OP EOF CONCEPT ACTION_START
--   reduce production action -> action_sig action_firing_cond action_body

State 117:
## Known stack suffix:
## action
## LR(1) items:
nonempty_list(action) -> action . [ OP EOF CONCEPT ]
nonempty_list(action) -> action . nonempty_list(action) [ OP EOF CONCEPT ]
## Transitions:
-- On ACTION_START shift to state 84
-- On nonempty_list(action) shift to state 118
-- On action_sig shift to state 97
-- On action shift to state 117
## Reductions:
-- On OP EOF CONCEPT
--   reduce production nonempty_list(action) -> action

State 118:
## Known stack suffix:
## action nonempty_list(action)
## LR(1) items:
nonempty_list(action) -> action nonempty_list(action) . [ OP EOF CONCEPT ]
## Transitions:
## Reductions:
-- On OP EOF CONCEPT
--   reduce production nonempty_list(action) -> action nonempty_list(action)

State 119:
## Known stack suffix:
## c_sig c_purpose c_state c_actions
## LR(1) items:
concept -> c_sig c_purpose c_state c_actions . [ EOF CONCEPT ]
## Transitions:
## Reductions:
-- On EOF CONCEPT
--   reduce production concept -> c_sig c_purpose c_state c_actions


{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Conceptual",
  "patterns": [
    {"include": "#comments"},
    {"include": "#strings"},
    {"include": "#literals"},
    {"include": "#operators"},
    {"include": "#keywords"},
		{"include": "#entities"},
		{"include": "#concept"},
		{"include": "#app"},
    {"include": "#punctuations"}
  ],
	"repository": {
		"comments": {
			"patterns": [
				{ "include": "#comment-block" },
				{ "include": "#comment-line" }
			]
		},
		
		"strings": {
			"name": "string.quoted.double",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape",
					"match": "\\\\."
				}
			]
		},

		"literals": {
			"patterns": [
				{ "include": "#integer"},
				{ "include": "#empty"}
			]
		},

		"operators":{
			"patterns": [
				{ "include": "#ltl-operator"},
				{ "include": "#comparison-operator"},
				{ "include": "#logical-operator"},
				{ "include": "#binary-operator"},
				{ "include": "#unary-operator"}
			]
		},

		"entities": {
			"patterns": [
				{"include": "#action"},
				{"include": "#types"}		
			]
		},

		"action": {
			"patterns": [
				{
					"name": "entity.name.function.action",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\s*\\()"
				}
			]
		},
		
		"punctuations": {
			"patterns": [
				{
					"name": "keyword.other.separator",
					"match": "(,|\\:|\\|)"
				}
			]
		},

		"keywords": {
			"patterns": [
				{
					"name": "keyword.other.set",
					"match": "\\b(set|lone|one)\\b"
				},
				{
					"name": "keyword.other.modifier",
					"match": "\\bconst\\b" 
				},
				{
					"name": "keyword.control",
					"match": "\\bwhen\\b"
				},
				{"include": "#concept"},
				{"include": "#app"}
			]
		},

		"types": {
			"patterns": [
				{
					"name": "storage.type",
					"match": "\\b(Int|String)\\b"
				}
			]
		},

		"comparison-operator": {
			"name": "keyword.operator.comparison",
			"match": "(=|>|<|>=|<=)|\\b(in|is)\\b"
		},
		"logical-operator": {
			"name": "keyword.operator.logical",
			"match": "\\b(and|or|not)\\b|(!|&&|\\|\\|)"
		},
		"ltl-operator": {
			"name": "keyword.operator.ltl",
			"match": "\\b(then|until|no)\\b|;"
		},

		"binary-operator": {
			"name": "keyword.operator.binary",
			"match": "(\\+|-|&\\*|\\.|/|\\%|->)"
		},
		"unary-operator": {
			"name": "keyword.operator.unary",
			"match": "\\bcan\\b|(\\^|#|~|\\*)"
		},

		"comment-block": {
			"begin": "/\\*",
			"end": "\\*/",
			"name": "comment.block"
		},
		"comment-line": {
			"match": "//.*",
			"name": "comment.line.double-slash"
		},

		"integer": {
			"match": "\\b\\d+\\b",
			"name": "constant.numeric.integer"
		},
		"empty": {
			"match": "\\b(none|empty)\\b",
			"name": "constant.other"
		},

		"concept": {
			"patterns": [
				{
					"name": "storage.type.concept",
					"match": "\\b(concept|purpose|state|actions|principle)\\b"
				}
			]
		},
		"app": {
			"patterns": [
				{
					"name": "storage.type.app",
					"match": "\\b(app|include|sync)\\b"
				}
			]
		}
	},

	"scopeName": "source.con"
}

